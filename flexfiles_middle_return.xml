<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor='sec:return' title="Flexible Files Layout Type Return">
  <t>
    layoutreturn_file4 is used in the LAYOUTRETURN operation
    to convey layout-type specific information to the server.
    It is defined in <xref target="RFC5661" /> as follows:
  </t>

  <t>
    &lt;CODE BEGINS&gt;
  </t>

  <figure>
    <artwork>
struct layoutreturn_file4 {
        offset4         lrf_offset;
        length4         lrf_length;
        stateid4        lrf_stateid;
        /* layouttype4 specific data */
        opaque          lrf_body&lt;&gt;;
};
    </artwork>
  </figure>

  <figure>
    <artwork>
union layoutreturn4 switch(layoutreturn_type4 lr_returntype) {
        case LAYOUTRETURN4_FILE:
                layoutreturn_file4      lr_layout;
        default:
                void;
};
    </artwork>
  </figure>

  <figure>
    <artwork>
struct LAYOUTRETURN4args {
        /* CURRENT_FH: file */
        bool                    lora_reclaim;
        layoutreturn_stateid    lora_recallstateid;
        layouttype4             lora_layout_type;
        layoutiomode4           lora_iomode;
        layoutreturn4           lora_layoutreturn;
};
    </artwork>
  </figure>

  <t>
    &lt;CODE ENDS&gt;
  </t>

  <t>
    If the lora_layout_type layout type is LAYOUT4_FLEX_FILES, then
    the lrf_body opaque value is defined by ff_layoutreturn4
    (See <xref target='ff_layoutreturn4' />).  It
    allows the client to report I/O error information or layout
    usage statistics back to the metadata server as defined below.
  </t>

  <section anchor="ss:return:errors" title="I/O Error Reporting">
    <section anchor="ff_ioerr4" title="ff_ioerr4">
      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
/// struct ff_ioerr4 {
///         offset4        ffie_offset;
///         length4        ffie_length;
///         stateid4       ffie_stateid;
///         device_error4  ffie_errors&lt;&gt;;
/// };
///
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
        Recall that <xref target='NFSv42' /> defines device_error4 as:
      </t>

      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
struct device_error4 {
        deviceid4       de_deviceid;
        nfsstat4        de_status;
        nfs_opnum4      de_opnum;
};
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
        The ff_ioerr4 structure is used to return error indications
        for data files that generated errors during data transfers.
        These are hints to the metadata server that there are problems
        with that file.  For each error, ffie_errors.de_deviceid,
        ffie_offset, and ffie_length represent the storage device and
        byte range within the file in which the error occurred;
        ffie_errors represents the operation and type of error. The
        use of device_error4 is described in Section 15.6 of
        <xref target='NFSv42' />.
      </t>

      <t>
        Even though the storage device might be accessed via NFSv3
        and reports back NFSv3 errors to the client, the client is
        responsible for mapping these to appropriate NFSv4 status
        codes as de_status.  Likewise, the NFSv3 operations need
        to be mapped to equivalent NFSv4 operations.
      </t>
    </section>
  </section>

  <section anchor='ss:return:stats' title='Layout Usage Statistics'>
    <section anchor="ff_io_latency4" title="ff_io_latency4">
      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
/// struct ff_io_latency4 {
///         nfstime4       ffil_min;
///         nfstime4       ffil_max;
///         nfstime4       ffil_avg;
///         uint32_t       ffil_count;
/// };
///
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
        When determining latencies, the client can collect the minimum
        via ffil_min, the maximum via ffil_max, and the average via
        ffil_avg. Further, ffil_count relates how many data points
        were collected in the reported period.
      </t>
    </section>

    <section anchor="ff_layoutupdate4" title="ff_layoutupdate4">
      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
/// struct ff_layoutupdate4 {
///         netaddr4       ffl_addr;
///         nfs_fh4        ffl_fhandle;
///         ff_io_latency4 ffl_read;
///         ff_io_latency4 ffl_write;
///         nfstime4       ffl_duration;
///         bool           ffl_local;
/// };
///
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
	ffl_addr differentiates which network address the client
	connected to on the storage device.  In the case of
	multipathing, ffl_fhandle indicates which read-only copy
	was selected. ffl_read and ffl_write convey the latencies
	respectively for both read and write operations.  ffl_duration
	is used to indicate the time period over which the statistics
	were collected.  ffl_local if true indicates that the I/O
	was serviced by the client's cache. This flag allows the
	client to inform the metadata server about "hot" access to
	a file it would not normally be allowed to report on.
      </t>
    </section>

    <section anchor="ff_iostats4" title="ff_iostats4">
      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
/// struct ff_iostats4 {
///         offset4           ffis_offset;
///         length4           ffis_length;
///         stateid4          ffis_stateid;
///         io_info4          ffis_read;
///         io_info4          ffis_write;
///         deviceid4         ffis_deviceid;
///         ff_layoutupdate4  ffis_layoutupdate;
/// };
///
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
        Recall that <xref target='NFSv42' /> defines io_info4 as:
      </t>

      <t>
        &lt;CODE BEGINS&gt;
      </t>

      <figure>
        <artwork>
struct io_info4 {
        uint64_t        ii_count;
        uint64_t        ii_bytes;
};
        </artwork>
      </figure>

      <t>
        &lt;CODE ENDS&gt;
      </t>

      <t>
        With pNFS, the data transfers are performed directly between
        the pNFS client and the storage devices.  Therefore, the
        metadata server has no visibility to the I/O stream and cannot
        use any statistical information about client I/O to optimize
        data storage location.  ff_iostats4 MAY be used by the client
        to report I/O statistics back to the metadata server upon
        returning the layout.  Since it is infeasible for the client
        to report every I/O that used the layout, the client MAY
        identify "hot" byte ranges for which to report I/O statistics.
        The definition and/or configuration mechanism of what is
        considered "hot" and the size of the reported byte range is
        out of the scope of this document.  It is suggested for client
        implementation to provide reasonable default values and an
        optional run-time management interface to control these
        parameters.  For example, a client can define the default
        byte range resolution to be 1 MB in size and the thresholds
        for reporting to be 1 MB/second or 10 I/O operations per
        second.  For each byte range, ffis_offset and ffis_length
        represent the starting offset of the range and the range
        length in bytes.  ffis_read.ii_count,
        ffis_read.ii_bytes, ffis_write.ii_count, and ffis_write.ii_bytes
        represent, respectively, the number of contiguous read and
        write I/Os and the respective aggregate number of bytes
        transferred within the reported byte range.
      </t>

      <t>
        The combination of ffis_deviceid and ffl_addr uniquely identify
        both the storage path and the network route to it. 
        Finally, the ffl_fhandle allows the metadata server to differentiate
        between multiple read-only copies of the file on the same
        storage device.
      </t>
    </section>
  </section>

  <section anchor="ff_layoutreturn4" title="ff_layoutreturn4">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <figure>
      <artwork>
/// struct ff_layoutreturn4 {
///         ff_ioerr4     fflr_ioerr_report&lt;&gt;;
///         ff_iostats4   fflr_iostats_report&lt;&gt;;
/// };
///
      </artwork>
    </figure>

    <t>
      &lt;CODE ENDS&gt;
    </t>

    <t>
      When data file I/O operations fail, fflr_ioerr_report&lt;&gt;
      is used to report these errors to the metadata server as an
      array of elements of type ff_ioerr4.  Each element in the
      array represents an error that occurred on the data file
      identified by ffie_errors.de_deviceid.  If no errors are to
      be reported, the size of the fflr_ioerr_report&lt;&gt; array
      is set to zero.  The client MAY also use fflr_iostats_report&lt;&gt;
      to report a list of I/O statistics as an array of elements
      of type ff_iostats4.  Each element in the array represents
      statistics for a particular byte range.  Byte ranges are not
      guaranteed to be disjoint and MAY repeat or intersect.
    </t>
  </section>
</section>
