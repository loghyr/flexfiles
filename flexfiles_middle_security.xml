<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor="sec:fencing" title="Client Fencing">
  <t>
    In cases where clients are uncommunicative and their lease has
    expired or when clients fail to return recalled layouts within
    a lease period, the server MAY revoke client layouts
    and reassign these resources to
    other clients (see Section 12.5.5 in <xref target='RFC5661' />).
    To avoid data corruption, the metadata server MUST fence
    off the revoked clients from the respective data files as described
    in <xref target='sec:sec_models' />.
 </t>
</section>

<section anchor="sec:security" title="Security Considerations">
  <t>
    The combination of components in a pNFS system is required to
    preserve the security properties of NFSv4.1+ with respect to an
    entity accessing data via a client.  The pNFS feature partitions the
    NFSv4.1+ file system protocol into two parts, the control
    protocol and the data protocol.  As the control protocol in
    this document is NFS, the security properties are equivalent
    to that version of NFS.  The Flexible File Layout further divides
    the data protocol into metadata and data paths.  The security
    properties of the metadata path are equivalent to those of
    NFSv4.1x (see Sections 1.7.1 and 2.2.1 of <xref target='RFC5661' />).
    And the security properties of the data path are equivalent
    to those of the version of NFS used to access the storage device,
    with the provision that the metadata server is responsible for
    authenticating client access to the data file.  The metadata
    server provides appropriate credentials to the client to access
    data files on the storage device.  It is also responsible for
    revoking access for a client to the storage device.
  </t>

  <t>
    The metadata server enforces the file access-control policy at
    LAYOUTGET time.  The client should use RPC authorization
    credentials for getting the layout for the requested iomode
    (READ or RW) and the server verifies the permissions and ACL
    for these credentials, possibly returning NFS4ERR_ACCESS if the
    client is not allowed the requested iomode.  If the LAYOUTGET
    operation succeeds the client receives, as part of the layout,
    a set of credentials allowing it I/O access to the specified
    data files corresponding to the requested iomode.  When the
    client acts on I/O operations on behalf of its local users, it
    MUST authenticate and authorize the user by issuing respective
    OPEN and ACCESS calls to the metadata server, similar to having
    NFSv4 data delegations.
  </t>

  <t>
    The combination of file handle, synthetic uid, and gid in the layout
    are the way that the metadata server enforces access control to
    the data server.  The client only has access to file handles of
    file objects and not directory objects. Thus, given a file handle
    in a layout, it is not possible to guess the parent directory file
    handle. Further, as the data file permissions only allow the given
    synthetic uid read/write permission and the given synthetic gid
    read permission, knowing the synthetic ids of one file does not
    necessarily allow access to any other data file on the storage device.
  </t>

  <t>
    The metadata server can also deny access at any time by fencing
    the data file, which means changing the synthetic ids. In turn,
    that forces the client to return its current layout and get a new
    layout if it wants to continue IO to the data file.
  </t>

  <t>
    If access is allowed, the client uses the corresponding (READ or RW)
    credentials to perform the I/O operations at the data file's storage
    devices.  When the metadata server receives a request to change a
    file's permissions or ACL, it SHOULD recall all layouts for that file
    and then MUST fence off any clients still holding outstanding layouts
    for the respective files by implicitly invalidating the previously
    distributed credential on all data file comprising the file in
    question.  It is REQUIRED that this be done before committing to the
    new permissions and/or ACL.  By requesting new layouts, the clients
    will reauthorize access against the modified access control metadata.
    Recalling the layouts in this case is intended to prevent clients
    from getting an error on I/Os done after the client was fenced off.
  </t>

  <section anchor="ss:security:krb5" title="RPCSEC_GSS and Security Services">

    <t>
      Because of the special use of principals within the loose coupling
      model, the issues are different depending on the coupling model.
    </t>

    <section anchor="ss:sec:krb5:lc" title="Loosely Coupled">
      <t>
        RPCSEC_GSS version 3 (RPCSEC_GSSv3) <xref target='RFC7861' />
        contains facilities that would allow it to be used to authorize
        the client to the storage device on behalf of the metadata server.
        Doing so  would require that each of the metadata server, storage
        device, and client would need to implement RPCSEC_GSSv3 using
        an RPC-application-defined structured privilege assertion in a
        manner described in Section 4.9.1 of <xref target='RFC7862' />.
        The specifics necessary to do so are not described in this
        document.  This is principally because any such specification
        would require extensive implementation work on a wide range of
        storage devices, which would be unlikely to result in a widely
        usable specification for a considerable time.
      </t>

      <t>
        As a result, the layout type described in this document will
        not provide support for use of RPCSEC_GSS together with the
        loosely coupled model.  However, future layout types could be
        specified which would allow such support, either through the use
        of RPCSEC_GSSv3, or in other ways.
      </t>
    </section>

    <section anchor="ss:sec:krb5:tc" title="Tightly Coupled">
      <t>
        With tight coupling, the principal used to access the metadata
        file is exactly the same as used to access the data file.
        The storage device can use the control protocol to validate any
        RPC credentials. As a result there are no security issues related
        to using RPCSEC_GSS with a tightly coupled system.  For example,
        if Kerberos V5 GSS-API <xref target='RFC4121' /> is used as the
        security mechanism, then the storage device could use a control
        protocol to validate the RPC credentials to the metadata server.
      </t>
    </section>
  </section>
</section>
