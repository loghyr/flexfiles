<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section anchor="sec:intro" title="Introduction">
  <t>
    In the parallel Network File System (pNFS), the metadata server
    returns layout type structures that describe where file data
    is located.  There are different layout types for different
    storage systems and methods of arranging data on storage devices.
    This document defines the flexible file layout type used with
    file-based data servers that are accessed using the Network File
    System (NFS) protocols: NFSv3 <xref target="RFC1813" />, NFSv4.0 <xref
    target="RFC7530" />, NFSv4.1 <xref target="RFC5661" />, and NFSv4.2
    <xref target="RFC7862" />.
  </t>

  <t>
    To provide a global state model equivalent to that of the files
    layout type, a back-end control protocol might be implemented between
    the metadata server and NFSv4.1+ storage devices.  This document
    does not provide a standard track control protocol. An
    implementation can either define its own mechanism or it
    could define a control protocol in a standard's track document.
    The requirements for a control protocol are specified in <xref
    target="RFC5661" /> and clarified in <xref target='pNFSLayouts' />.
  </t>

  <t>
    The control protocol described in this document is based on NFS.
    The storage devices are configured such that the metadata server
    has full access rights to the data file system and then the
    metadata server uses synthetic ids to control client access to
    individual files.
  </t>

  <t>
    In traditional mirroring of data, the server is responsible
    for replicating, validating, and repairing copies of the data
    file.  With client-side mirroring, the metadata server provides
    a layout which presents the available mirrors to the client.
    It is then the client which picks a mirror to read from and
    ensures that all writes go to all mirrors. Only if all mirrors
    are successfully updated, does the client consider the
    write transaction to have succeeded. In case of error,
    the client can use the LAYOUTERROR operation to inform
    the metadata server, which is then responsible for the
    repairing of the mirrored copies of the file.
  </t>

  <section anchor='sec:defs' title='Definitions'>
    <t>
      <list style='hanging'>
        <t hangText='control communication requirements:'>
          is the specification for information on layouts, stateids,
          file metadata, and file data which must be communicated between
          the metadata server and the storage devices. There is
          a separate set of requirements for each layout type.
        </t>

        <t hangText='control protocol:'>
          is the particular mechanism that an implementation of a
          layout type would use to meet the control communication
          requirement for that layout type.  This need not be a
          protocol as normally understood.  In some cases the same
          protocol may be used as a control protocol and storage
          protocol.
        </t>

        <t hangText='client-side mirroring:'>
          is a feature in which the client and not the server is
          responsible for updating all of the mirrored copies of a
          layout segment.
        </t>

        <t hangText='(file) data:'>
          is that part of the file system object which contains
          the content.
        </t>

        <t hangText='data server (DS):'>
          is another term for storage device.
        </t>

        <t hangText='fencing:'>
          is the process by which the metadata server prevents the
          storage devices from processing I/O from a specific client to
          a specific file.
        </t>

        <t hangText='file layout type:'>
          is a layout type in which the storage devices
          are accessed via the NFS protocol (see Section 13
          of <xref target='RFC5661' />).
        </t>

        <t hangText='gid:'>
          is the group id, a numeric value which identifies to which group
          a file belongs.
        </t>

        <t hangText='layout:'>
           is the information a client uses to access file data on a
           storage device. This information will include specification
           of the protocol (layout type) and the identity of the storage
           devices to be used.
        </t>

        <t hangText='layout iomode:'>
          is a grant of either read or read/write I/O to the client.
        </t>

        <t hangText='layout segment:'>
          is a sub-division of a layout.  That sub-division
          might be by the layout iomode (see Sections 3.3.20 and 12.2.9  of
          <xref target='RFC5661' />), a striping pattern (see Section
          13.3 of <xref target='RFC5661' />), or requested
          byte range.
        </t>

        <t hangText='layout stateid:'>
          is a 128-bit quantity returned by a server that
          uniquely defines the layout state provided by the server
          for a specific layout that describes a layout type and
          file (see Section 12.5.2 of <xref target='RFC5661' />).
          Further, Section 12.5.3 describes differences in handling
          between layout stateids and other stateid types.
        </t>

        <t hangText='layout type:'>
          is a specification of both the storage protocol used to
          access the data and the aggregation scheme used to lay out
          the file data on the underlying storage devices.
        </t>

        <t hangText='loose coupling:'>
          is when the control protocol is a storage protocol.
        </t>

        <t hangText='(file) metadata:'>
          is that part of the file system object which describes
          the object and not the content. E.g., it could be the
          time since last modification, access, etc.
        </t>

        <t hangText='metadata server (MDS):'>
          is the pNFS server which provides metadata information for a file
          system object. It also is responsible for generating, recalling,
          and revoking layouts for file system objects, for performing
          directory operations, and for performing I/O operations to
          regular files when the clients direct these to the metadata
          server itself.
        </t>

        <t hangText='mirror:'>
          is a copy of a layout segment. 
          Note that if one copy of the mirror is updated,
          then all copies must be updated.
        </t>

        <t hangText='recalling a layout:'>
          is when the metadata server uses a back channel to inform
          the client that the layout is to be returned in a graceful
          manner. Note that the client has the opportunity to flush any
          writes, etc., before replying to the metadata server.
        </t>

        <t hangText='revoking a layout:'>
          is when the metadata server invalidates the layout such
          that neither the metadata server nor any storage device
          will accept any access from the client with that layout.
        </t>

        <t hangText='resilvering:'>
          is the act of rebuilding a mirrored copy of a layout segment from
          a known good copy of the layout segment.  Note that this can also
          be done to create a new mirrored copy of the layout segment.
        </t>

        <t hangText='rsize:'>
          is the data transfer buffer size used for reads.
        </t>

        <t hangText='stateid:'>
          is a 128-bit quantity returned by a server that uniquely
          defines the open and locking states provided by the server
          for a specific open-owner or lock-owner/open-owner pair
          for a specific file and type of lock.
        </t>

        <t hangText='storage device:'>
          is the target to which clients may direct I/O requests when
          they hold an appropriate layout.  See Section 2.1 of <xref
          target='pNFSLayouts' /> for further discussion of the difference
          between a data store and a storage device.
        </t>

        <t hangText='storage protocol:'>
          is the protocol used by clients to do I/O operations to the
          storage device.  Each layout type specifies the set of storage
          protocols.
        </t>

        <t hangText='tight coupling:'>
          is an arrangement in which the control protocol is one
          designed specifically for that purpose.  It may be either a
          proprietary protocol, adapted specifically to a a particular
          metadata server, or one based on a standards-track document. 
        </t>

        <t hangText='uid:'>
          is the used id, a numeric value which identifies which
          user owns a file.
        </t>

        <t hangText='wsize:'>
          is the data transfer buffer size used for writes.
        </t>
      </list>
    </t>
  </section>

  <section title="Requirements Language">
    <t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
      &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
      &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
      &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted
      as described in BCP 14 <xref target="RFC2119" /> 
      <xref target="RFC8174" /> when, and only when, they appear
      in all capitals, as shown here.
    </t>
  </section>
</section>
