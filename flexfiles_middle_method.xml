<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section title="Method of Operation">
  <t>
    This section describes the semantics and format of flexible
    file-based layouts for pNFS.  Flexible file-based layouts use
    the LAYOUT4_FLEX_FILES layout type.  The LAYOUT4_FLEX_FILES
    type defines striping data across multiple NFS Data Servers.
  </t>

  <t>
    For the purpose of this discussion, we will distinguish between
    user files served by the metadata server, to be referred to as
    User Files; vs. user files served by Data Servers, to be referred to as
    Component Objects.
  </t>

  <t>
    Component Objects are addressable by their NFS filehandle.
    Each Component Object may store a whole User File or parts of it, in
    case the User File is striped across multiple Component Objects.
    The striping pattern is provided by pfl_striping_pattern as defined
    below.
  </t>

  <t>
    Data Servers may be accessed using different versions of the NFS protocol.
    It is required that the server MUST use Data Servers of the same NFS
    version and minor version for striping data within each layout.
    The NFS version and minor version define the respective security,
    state, and locking models to be used, as described below.
  </t>

  <section anchor='sec:sec_models' title="Security models">
    <t>
      With NFSv3 Data Servers, the Metadata Server uses synthetic
      uids and gids for the Component Objects, where the uid owner
      of the Component Objects is allowed read/write access and the
      gid owner is allowed read only access.  As part of the layout,
      the client is provided with the rpc credentials to be used
      (XREF pfcf_auth) to access the Object.  Fencing off clients
      is achieved by using SETATTR by the server to change the uid
      and/or gid owners of the Component Objects to implicitly
      revoke the outstanding rpc credentials.  Note: it is recommended
      to implement common access control methods at the Data Server
      filesystem exports level to allow only the Metadata Server
      root (super user) access to the Data Server, and to set the
      owner of all directories holding Component Objects to the
      root user.  This security method, when using weak auth flavors
      such as AUTH_SYS, provides a practical model to enforce access
      control and fence off cooperative clients, but it can not
      protect against malicious clients; hence it provides a level
      of security equivalent to NFSv3.
    </t>

    <t>
      With NFSv4.x Data Servers, the Metadata Server sets the user
      and group owners, mode bits, and ACL of the Component Objects
      to be the same as the User File. And the client must authenticate
      with the Data Server and go through the same authorization
      process it would go through via the Metadata Server.
    </t>
  </section>

  <section title="State and Locking Models">
    <t>
      User File OPEN, LOCK, and DELEGATION operations are always
      executed only against the Metadata Server.
    </t>

    <t>
      With NFSv4 Data Servers, the Metadata Server, in response to the state
      changing operation, executes them against the respective Component
      Objects on the Data Server(s).  It then sends the Data Server
      open stateid as part of the layout (XREF pfcf_stateid) and
      it is then used by the client for executing READ/WRITE operations
      against the Data Server.
    </t>

    <t>
      Standalone NFSv4.1 Data Servers that do not return the
      EXCHGID4_FLAG_USE_PNFS_DS flag to EXCHANGE_ID are used the same
      way as NFSv4 Data Servers.
    </t>

    <t>
      NFSv4.1 Clustered Data Servers that do identify themselves with the
      EXCHGID4_FLAG_USE_PNFS_DS flag to EXCHANGE_ID use a back-end
      control protocol as described in <xref target="RFC5661" />
      to implement a global stateid model as defined there.
    </t>
  </section>
</section>
