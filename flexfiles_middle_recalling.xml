<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section title="Recalling a Layout">
  <t>
    While Section 12.5.5 of <xref target="RFC5661" /> discusses 
    layout type independent reasons for recalling a layout,
    the Flexible File Layout Type metadata server should
    recall outstanding layouts in the following cases:

    <list style='symbols'>
      <t>
        When the file's security policy changes, i.e., Access Control Lists
        (ACLs) or permission mode bits are set.
      </t>

      <t>
        When the file's layout changes, rendering outstanding layouts invalid.
      </t>

      <t>
        When there are sharing conflicts.
      </t>

      <t>
        When a file is being resilvered, either due to being repaired after
        a write error or to load balance.
      </t>
    </list>
  </t>

  <section title="CB_RECALL_ANY" anchor="CB_RECALL_ANY">
    <t>
      The metadata server can use the CB_RECALL_ANY callback operation
      to notify the client to return some or all of its layouts.
      The <xref target="RFC5661" /> defines the following types:
    </t>

    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <figure>
      <artwork>
const RCA4_TYPE_MASK_FF_LAYOUT_MIN     = -2;
const RCA4_TYPE_MASK_FF_LAYOUT_MAX     = -1;
[[RFC Editor: please insert assigned constants]]

struct  CB_RECALL_ANY4args      {
    uint32_t        craa_layouts_to_keep;
    bitmap4         craa_type_mask;
};
      </artwork>
    </figure>

    <t>
      &lt;CODE ENDS&gt;
    </t>

    <t>
      <cref anchor='AI13 ' source='TH'>
        No, 5661 does not define these above values. The ask here is
        to create these and _add_ them to 5661.
      </cref>
    </t>

    <t>
      Typically, CB_RECALL_ANY will be used to recall client state
      when the server needs to reclaim resources. The craa_type_mask
      bitmap specifies the type of resources that are recalled and
      the craa_layouts_to_keep value specifies how many of the
      recalled Flexible File Layouts the client is allowed to keep.
      The Flexible File Layout Type mask flags are defined as
      follows:
    </t>

    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <figure>
      <artwork>
/// enum ff_cb_recall_any_mask {
///     FF_RCA4_TYPE_MASK_READ = -2,
///     FF_RCA4_TYPE_MASK_RW   = -1
[[RFC Editor: please insert assigned constants]]
/// };
///
      </artwork>
    </figure>

    <t>
      &lt;CODE ENDS&gt;
    </t>

    <t>
      They represent the iomode of the recalled layouts.  In response,
      the client SHOULD return layouts of the recalled iomode that
      it needs the least, keeping at most craa_layouts_to_keep
      Flexible File Layouts.
    </t>

    <t>
      The PNFS_FF_RCA4_TYPE_MASK_READ flag notifies the client to
      return layouts of iomode LAYOUTIOMODE4_READ.  Similarly, the
      PNFS_FF_RCA4_TYPE_MASK_RW flag notifies the client to return
      layouts of iomode LAYOUTIOMODE4_RW.  When both mask flags are
      set, the client is notified to return layouts of either iomode.
    </t>
  </section>
</section>
