<!-- Copyright (C) The IETF Trust (2014) -->
<!-- Copyright (C) The Internet Society (2014) -->

<section title="Device Addressing and Discovery">
  <t>
    Data operations to a storage device require the client to know the
    network address of the storage device.  The NFSv4.1+ GETDEVICEINFO
    operation (Section 18.40 of <xref target="RFC5661" />) is
    used by the client to retrieve that information.
  </t>

  <section title="ff_device_addr4" anchor="ff_device_addr4">
    <t>
      The ff_device_addr4 data structure is returned by the server
      as the storage protocol specific opaque field da_addr_body in the
      device_addr4 structure by a successful GETDEVICEINFO operation.
    </t>

    <t>
      &lt;CODE BEGINS&gt;
    </t>
    <figure>
      <artwork>
/// struct ff_device_versions4 {
///         uint32_t        ffdv_version;
///         uint32_t        ffdv_minorversion;
///         uint32_t        ffdv_rsize;
///         uint32_t        ffdv_wsize;
///         bool            ffdv_tightly_coupled;
/// };
///
      </artwork>
    </figure>

    <figure>
      <artwork>
/// struct ff_device_addr4 {
///         multipath_list4     ffda_netaddrs;
///         ff_device_versions4 ffda_versions&lt;&gt;;
/// };
///
      </artwork>
    </figure>
    <t>
      &lt;CODE ENDS&gt;
    </t>

    <t>
      The ffda_netaddrs field is used to locate the storage device.
      It MUST be set by the server to a list holding one or more
      of the device network addresses.
    </t>

    <t>
      The ffda_versions array allows the metadata server to present
      choices as to NFS version, minor version, and coupling strength to the client.
      The ffdv_version and ffdv_minorversion represent the NFS
      protocol to be used to access the storage device.  This layout
      specification defines the semantics for ffdv_versions 3 and
      4.  If ffdv_version equals 3 then the server MUST set ffdv_minorversion
      to 0 and ffdv_tightly_coupled to false.  The client MUST
      then access the storage device using the
      NFSv3 protocol <xref target="RFC1813" />.  If ffdv_version
      equals 4 then the server MUST set ffdv_minorversion to one of
      the NFSv4 minor version numbers and the client MUST access the
      storage device using NFSv4.
    </t>

    <t>
      Note that while the client might determine that it cannot
      use any of the configured combinations of ffdv_version, ffdv_minorversion,
      and ffdv_tightly_coupled,
      when it gets the device list from the metadata server, there
      is no way to indicate to the metadata server as to which device
      it is version incompatible. If however, the client waits until
      it retrieves the layout from the metadata server, it can at
      that time clearly identify the storage device in question
      (see <xref target='layout:versioning' />).
    </t>

    <t>
      The ffdv_rsize and ffdv_wsize are used to communicate the maximum
      rsize and wsize supported by the storage device. As the storage
      device can have a different rsize or wsize than the metadata
      server, the ffdv_rsize and ffdv_wsize allow the metadata server
      to communicate that information on behalf of the storage device.
    </t>

    <t>
      ffdv_tightly_coupled informs the client as to whether the metadata
      server is tightly coupled with the storage devices or not. Note
      that even if the data protocol is at least NFSv4.1, it may
      still be the case that there is loose coupling is in effect. If
      ffdv_tightly_coupled is not set, then the client MUST commit writes
      to the storage devices for the file before sending a LAYOUTCOMMIT
      to the metadata server. I.e., the writes MUST be committed by
      the client to stable storage via issuing WRITEs with stable_how
      == FILE_SYNC or by issuing a COMMIT after WRITEs with stable_how
      != FILE_SYNC (see Section 3.3.7 of <xref target='RFC1813' />).
    </t>
  </section>

  <section title="Storage Device Multipathing" anchor="sec:DSM">
    <t>
      The flexible file layout type supports multipathing to multiple
      storage device addresses.  Storage device level multipathing is
      used for bandwidth scaling via trunking and for higher
      availability of use in the event of a storage device failure.
      Multipathing allows the client to switch to another storage
      device address which may be that of another storage device that
      is exporting the same data stripe unit, without having to
      contact the metadata server for a new layout.
    </t>

    <t>
      To support storage device multipathing, ffda_netaddrs contains
      an array of one or more storage device network addresses.  This
      array (data type multipath_list4) represents a list of storage
      devices (each identified by a network address), with the
      possibility that some storage device will appear in the list
      multiple times.
    </t>

    <t>
      The client is free to use any of the network addresses as a
      destination to send storage device requests.  If some network
      addresses are less desirable paths to the data than others,
      then the MDS SHOULD NOT include those network addresses in
      ffda_netaddrs.  If less desirable network addresses exist to
      provide failover, the RECOMMENDED method to offer the addresses
      is to provide them in a replacement device-ID-to-device-address
      mapping, or a replacement device ID.  When a client finds no
      response from the storage device using all addresses available
      in ffda_netaddrs, it SHOULD send a GETDEVICEINFO to attempt
      to replace the existing device-ID-to-device-address mappings.
      If the MDS detects that all network paths represented by
      ffda_netaddrs are unavailable, the MDS SHOULD send a
      CB_NOTIFY_DEVICEID (if the client has indicated it wants
      device ID notifications for changed device IDs) to change the
      device-ID-to-device-address mappings to the available addresses.
      If the device ID itself will be replaced, the MDS SHOULD
      recall all layouts with the device ID, and thus force the
      client to get new layouts and device ID mappings via LAYOUTGET
      and GETDEVICEINFO.
    </t>

    <t>
      Generally, if two network addresses appear in ffda_netaddrs, they
      will designate the same storage device.  When the storage device
      is accessed over NFSv4.1 or a higher minor version, the two storage
      device addresses will support the implementation of client ID or
      session trunking (the latter is RECOMMENDED) as defined in <xref
      target="RFC5661" />.  The two storage device addresses will share
      the same server owner or major ID of the server owner.  It is not
      always necessary for the two storage device addresses to designate
      the same storage device with trunking being used.  For example,
      the data could be read-only, and the data consist of exact replicas.
    </t>
  </section>
</section>
